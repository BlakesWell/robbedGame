%Properties()
{
    UI_RimLightHeader("# Rim Light", Int) = 0
    [Toggle(RIMLIGHT_ON)]_RimLight("Enable Rim Light", Int) = 0
    _RimTint("Tint %ShowIf(RIMLIGHT_ON)", Color) = (1,1,1,1)
    _RimIntensity("Intensity %ShowIf(RIMLIGHT_ON)", Float) = 0.4
    _RimAlbedoTint("Albedo Tint %ShowIf(RIMLIGHT_ON)", Range(0,1)) = 1
    _RimEnvironmentTint("Environment Tint %ShowIf(RIMLIGHT_ON)", Range(0,1)) = 0
    _RimSpread("Spread %ShowIf(RIMLIGHT_ON)", Range(0, 1)) = 0.3
    _RimSharpness("Sharpness %ShowIf(RIMLIGHT_ON)", Range(0,1)) = 0.95
    _RimThreshold("Threshold %ShowIf(RIMLIGHT_ON)", Range(0, 1)) = 0
    UI_RimThresholdNote("> Controls how much the rim light will be offset by the light direction. 1 Will only show up in the areas hit by the light, 0 will show up everywhere %ShowIf(RIMLIGHT_ON)", Int) = 0
    _RimAttenuation("Attenuation %ShowIf(RIMLIGHT_ON)", Range(0,1)) = 1
    UI_RimAttenuationNote("> Controls how much the rimlight will be visible in shadowed areas. 0 always visible %ShowIf(RIMLIGHT_ON)", Int) = 0
}

%ShaderFeatures()
{
    #pragma shader_feature_local_fragment RIMLIGHT_ON
}


%AdditionalSurfaceData()
{
    #if defined(RIMLIGHT_ON)
    half3 RimTint;
    half RimIntensity;
    half RimAlbedoTint;
    half RimEnvTint;
    half RimSpread;
    half RimSharpness;
    half RimLightThreshold;
    half RimLightAttenuation;
    #endif
}


%Variables()
{
    #if defined(RIMLIGHT_ON)
    half4 _RimTint;
    half _RimIntensity;
    half _RimAlbedoTint;
    half _RimEnvironmentTint;
    half _RimAttenuation;
    half _RimSpread;
    half _RimThreshold;
    half _RimSharpness;
    #endif
}

%Fragment("ToonRimLightFragment")
{
    void ToonRimLightFragment(MeshData d, inout SurfaceData o) {
        #if defined(RIMLIGHT_ON)
        
        // This module is almost fully passthrough
        // This allows other modules to vary the parameters
        // While the final calculations are done in the lighting module
        o.RimIntensity = _RimIntensity;
        o.RimTint = _RimTint.rgb * _RimTint.a;
        o.RimAlbedoTint = _RimAlbedoTint;
        o.RimEnvTint = _RimEnvironmentTint;
        o.RimSpread = 1.0 - _RimSpread;
        o.RimSharpness = 1.0 - _RimSharpness;
        o.RimLightThreshold = _RimThreshold;
        o.RimLightAttenuation = _RimAttenuation;
        
        #endif
    }
}

%ModuleLighting("ToonRimLightLighting")
{
    void ToonRimLightLighting(SurfaceData o, MeshData d, half lightNoL, half3 lightColor, half lightAttenuation, half3 indirectDiffuse, inout half3 mainLightMixedSpecular)
    {
        #if defined(RIMLIGHT_ON)
        half SVDNoN = abs(dot(d.svdn, o.WorldNormal));

        // Rim Light Env Tint
        half3 env = 0;
        #if defined(UNITY_PASS_FORWARDBASE)
            env = getEnvReflection(d.worldSpaceViewDir.xyz, d.worldSpacePosition.xyz, o.WorldNormal, 0.5, 5);
        #endif

        half lightThreshold = o.RimLightThreshold < 0.0001 ? 1 : saturate(pow(saturate(lightNoL), o.RimLightThreshold));

        half rimIntensity = saturate((1 - SVDNoN)) * lightThreshold;
        rimIntensity = smoothstep(o.RimSpread - o.RimSharpness, o.RimSpread + o.RimSharpness, rimIntensity);
        
        half3 rim = rimIntensity * o.RimIntensity;
        rim *= o.RimTint;
        rim *= lerp(1, o.Albedo.rgb, o.RimAlbedoTint);
        rim *= lerp(1, env.rgb, o.RimEnvTint);
        rim *= lightColor + indirectDiffuse;
        rim *= lerp(1, lightAttenuation + indirectDiffuse, o.RimLightAttenuation);

        mainLightMixedSpecular += rim;
        #endif
    }
}