%LibraryFunctions(-50)
{
    #define FLT_EPSILON     1.192092896e-07

    // Helpful Macros
    #define DEBUG_FC(x) FinalColor.rgb *= 0.0001; \
                     FinalColor.rgb += x; \
                     return

    half3 BlendOverlay(half3 target, half3 source)
    {
        return (target > 0.5) * (1 - (1 - 2 * (target - 0.5)) * (1 - source)) + (target <= 0.5) * (2 * target * source);
    }

    bool isVR()
    {
    #if UNITY_SINGLE_PASS_STEREO
        return true;
    #else
        return false;
    #endif
    }

    bool isStereoView() {
    #ifdef USING_STEREO_MATRICES
        return true;
    #else
        return UNITY_MATRIX_P._13 != 0;
    #endif
    }

    half3 BlendLighten(half3 target, half3 source) {
        return max(target, source);
    }

    half3 BlendScreen(half3 target, half3 source) {
        return 1 - (1 - target) * (1 - source);
    }

    half invLerp(half a, half b, half v)
    {
        return (v - a) / (b - a);
    }

    half3 invLerp(half3 a, half3 b, half3 v)
    {
        return (v - a) / (b - a);
    }


    // w0, w1, w2, and w3 are the four cubic B-spline basis functions
    half w0(half a)
    {
      //    return (1.0f/6.0f)*(-a*a*a + 3.0f*a*a - 3.0f*a + 1.0f);
        return (1.0f / 6.0f) * (a * (a * (-a + 3.0f) - 3.0f) + 1.0f);   // optimized

    }

    half w1(half a)
    {
      //    return (1.0f/6.0f)*(3.0f*a*a*a - 6.0f*a*a + 4.0f);
        return (1.0f / 6.0f) * (a * a * (3.0f * a - 6.0f) + 4.0f);
    }

    half w2(half a)
    {
      //    return (1.0f/6.0f)*(-3.0f*a*a*a + 3.0f*a*a + 3.0f*a + 1.0f);
        return (1.0f / 6.0f) * (a * (a * (-3.0f * a + 3.0f) + 3.0f) + 1.0f);
    }

    half w3(half a)
    {
        return (1.0f / 6.0f) * (a * a * a);
    }

    // g0 and g1 are the two amplitude functions
    half g0(half a)
    {
        return w0(a) + w1(a);
    }

    half g1(half a)
    {
        return w2(a) + w3(a);
    }

    // h0 and h1 are the two offset functions
    half h0(half a)
    {
      // note +0.5 offset to compensate for CUDA linear filtering convention
        return -1.0f + w1(a) / (w0(a) + w1(a)) + 0.5f;
    }

    half h1(half a)
    {
        return 1.0f + w3(a) / (w2(a) + w3(a)) + 0.5f;
    }

    half4 tex2DFastBicubicSample(TEXTURE2D_PARAM(tex, sampler_tex), float2 uv)
    {
        #if !defined(PLAT_QUEST) && defined(BICUBIC_LIGHTMAP)
        half width;
        half height;
        tex.GetDimensions(width, height);
        half x = uv.x * width;
        half y = uv.y * height;



        x -= 0.5f;
        y -= 0.5f;
        half px = floor(x);
        half py = floor(y);
        half fx = x - px;
        half fy = y - py;

        // note: we could store these functions in a lookup table texture, but maths is cheap
        half g0x = g0(fx);
        half g1x = g1(fx);
        half h0x = h0(fx);
        half h1x = h1(fx);
        half h0y = h0(fy);
        half h1y = h1(fy);

        half4 r = g0(fy) * (g0x * SAMPLE_TEXTURE2D(tex, sampler_tex, (half2(px + h0x, py + h0y) * 1.0f / width)) +
        g1x * SAMPLE_TEXTURE2D(tex, sampler_tex, (half2(px + h1x, py + h0y) * 1.0f / width))) +
        g1(fy) * (g0x * SAMPLE_TEXTURE2D(tex, sampler_tex, (half2(px + h0x, py + h1y) * 1.0f / width)) +
        g1x * SAMPLE_TEXTURE2D(tex, sampler_tex, (half2(px + h1x, py + h1y) * 1.0f / width)));
        return r;
        #else
        return SAMPLE_TEXTURE2D(tex, sampler_tex, uv);
        #endif
    }

    float4 tex2DFastBicubicSampleNoChecks(TEXTURE2D_PARAM(tex, sampler_tex), float2 uv)
    {
        half width;
        half height;
        tex.GetDimensions(width, height);
        half x = uv.x * width;
        half y = uv.y * height;



        x -= 0.5f;
        y -= 0.5f;
        half px = floor(x);
        half py = floor(y);
        half fx = x - px;
        half fy = y - py;

        // note: we could store these functions in a lookup table texture, but maths is cheap
        half g0x = g0(fx);
        half g1x = g1(fx);
        half h0x = h0(fx);
        half h1x = h1(fx);
        half h0y = h0(fy);
        half h1y = h1(fy);

        half4 r = g0(fy) * (g0x * SAMPLE_TEXTURE2D(tex, sampler_tex, (half2(px + h0x, py + h0y) * 1.0f / width)) +
        g1x * SAMPLE_TEXTURE2D(tex, sampler_tex, (half2(px + h1x, py + h0y) * 1.0f / width))) +
        g1(fy) * (g0x * SAMPLE_TEXTURE2D(tex, sampler_tex, (half2(px + h0x, py + h1y) * 1.0f / width)) +
        g1x * SAMPLE_TEXTURE2D(tex, sampler_tex, (half2(px + h1x, py + h1y) * 1.0f / width)));
        return r;
    }

    half4 tex2DFastBicubicSampleLevel(TEXTURE2D_PARAM(tex, sampler_tex), float2 uv, int level)
    {
        #if !defined(PLAT_QUEST) && defined(BICUBIC_LIGHTMAP)
        half width;
        half height;
        tex.GetDimensions(width, height);
        half x = uv.x * width;
        half y = uv.y * height;



        x -= 0.5f;
        y -= 0.5f;
        half px = floor(x);
        half py = floor(y);
        half fx = x - px;
        half fy = y - py;

        // note: we could store these functions in a lookup table texture, but maths is cheap
        half g0x = g0(fx);
        half g1x = g1(fx);
        half h0x = h0(fx);
        half h1x = h1(fx);
        half h0y = h0(fy);
        half h1y = h1(fy);

        half4 r = g0(fy) * (g0x * SAMPLE_TEXTURE2D_LOD(tex, sampler_tex, (half2(px + h0x, py + h0y) * 1.0f / width), level) +
        g1x * SAMPLE_TEXTURE2D_LOD(tex, sampler_tex, (half2(px + h1x, py + h0y) * 1.0f / width), level)) +
        g1(fy) * (g0x * SAMPLE_TEXTURE2D_LOD(tex, sampler_tex, (half2(px + h0x, py + h1y) * 1.0f / width), level) +
        g1x * SAMPLE_TEXTURE2D_LOD(tex, sampler_tex, (half2(px + h1x, py + h1y) * 1.0f / width), level));
        return r;
        #else
        return SAMPLE_TEXTURE2D_LOD(tex, sampler_tex, uv, level);
        #endif
    }

    half getBakedNoise(TEXTURE2D_PARAM(noiseTex, sampler_noiseTex), float3 p)
    {
        float3 i = floor(p); p -= i; p *= p * (3. - 2. * p);
        float2 uv = (p.xy + i.xy + float2(37, 17) * i.z + .5) / 256.;
        uv.y *= -1;
        p.xy = SAMPLE_TEXTURE2D_LOD(noiseTex, sampler_noiseTex, uv, 0).yx;
        return lerp(p.x, p.y, p.z);
    }

    // Manual bilinear sampling to avoid 8 bit precision issues
    // Based on https://www.shadertoy.com/view/MllSzX
    half getBakedNoiseBilinear(TEXTURE2D_PARAM(noiseTex, sampler_noiseTex), float4 texSize, float3 p)
    {
        float3 i = floor(p); p -= i; p *= p * (3. - 2. * p);
        float2 uv = (p.xy + i.xy + float2(37, 17) * i.z + .5) / 256.;
        uv.y *= -1;
        
        float2 pixelUv = uv * texSize.zw + 0.5;
        float2 pixelUvFrac = frac(pixelUv);

        pixelUv = (floor(pixelUv) / texSize.zw) - texSize.xy * 0.5;

        float4 sample0 = SAMPLE_TEXTURE2D_LOD(noiseTex, sampler_noiseTex, pixelUv, 0);
        float4 sample1 = SAMPLE_TEXTURE2D_LOD(noiseTex, sampler_noiseTex, pixelUv + float2(texSize.x, 0), 0);
        float4 sample2 = SAMPLE_TEXTURE2D_LOD(noiseTex, sampler_noiseTex, pixelUv + float2(0, texSize.y), 0);
        float4 sample3 = SAMPLE_TEXTURE2D_LOD(noiseTex, sampler_noiseTex, pixelUv + float2(texSize.x, texSize.y), 0);

        float4 filtered1 = lerp(sample0, sample1, pixelUvFrac.x);
        float4 filtered2 = lerp(sample2, sample3, pixelUvFrac.x);
        float4 filtered = lerp(filtered1, filtered2, pixelUvFrac.y);
        
        p.xy = filtered.yx;
        return lerp(p.x, p.y, p.z);
    }

    half getBakedNoiseBicubic(TEXTURE2D_PARAM(noiseTex, sampler_noiseTex), float3 p)
    {
        float3 i = floor(p); p -= i; p *= p * (3. - 2. * p);
        float2 uv = (p.xy + i.xy + float2(37, 17) * i.z + .5) / 256.;
        uv.y *= -1;
        p.xy = tex2DFastBicubicSampleLevel(TEXTURE2D_ARGS(noiseTex, sampler_noiseTex), uv, 0).yx;
        return lerp(p.x, p.y, p.z);
    }

    half remap(half s, half a1, half a2, half b1, half b2)
    {
        return b1 + (s - a1) * (b2 - b1) / (a2 - a1);
    }

    half3 ApplyLut2D(TEXTURE2D_PARAM(lut2d, sampler_lut2d), half3 uvw)
    {
        half3 scaleOffset = half3(1.0 / 1024.0, 1.0 / 32.0, 31.0);
        // Strip format where `height = sqrt(width)`
        uvw.z *= scaleOffset.z;
        half shift = floor(uvw.z);
        uvw.xy = uvw.xy * scaleOffset.z * scaleOffset.xy + scaleOffset.xy * 0.5;
        uvw.x += shift * scaleOffset.y;
        uvw.xyz = lerp(
            SAMPLE_TEXTURE2D(lut2d, sampler_lut2d, uvw.xy).rgb,
            SAMPLE_TEXTURE2D(lut2d, sampler_lut2d, uvw.xy + half2(scaleOffset.y, 0.0)).rgb,
            uvw.z - shift
        );
        return uvw;
    }

    half3 HSV2RGB(half3 hsv)
    {    
        return hsv.z + hsv.z * hsv.y * (clamp(abs(fmod(hsv.x * 6.0 + half3(0,4,2), 6.0) - 3.0) - 1.0,0.0,1.0) - 1.0);
    }

    half3 RGB2HSV(half3 rgb)
    {
        half4 K = half4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
        half4 p = lerp(half4(rgb.bg, K.wz), half4(rgb.gb, K.xy), step(rgb.b, rgb.g));
        half4 q = lerp(half4(p.xyw, rgb.r), half4(rgb.r, p.yzx), step(p.x, rgb.r));

        half d = q.x - min(q.w, q.y);
        half e = 1.0e-10;
        return half3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
    }

    half3 HSVAdjust(half3 hsv, half3 adjustment)
    {
        hsv.x = frac(hsv.x + adjustment.x);
        hsv.y = saturate(hsv.y + adjustment.y);
        hsv.z = saturate(hsv.z + adjustment.z);
        return hsv;
    }

    half3 AdjustContrast(half3 color, half contrast)
    {
        color = saturate(lerp(half3(0.5, 0.5, 0.5), color, contrast));
        return color;
    }

    half3 AdjustSaturation(half3 color, half saturation)
    {
        half3 intensity = dot(color.rgb, half3(0.299, 0.587, 0.114));
        color = lerp(intensity, color.rgb, saturation);
        return color;
    }

    half3 AdjustBrightness(half3 color, half brightness)
    {
        color += brightness;
        return color;
    }

    struct ParamsLogC
    {
        half cut;
        half a, b, c, d, e, f;
    };

    static const ParamsLogC LogC = {
        0.011361, // cut
        5.555556, // a
        0.047996, // b
        0.244161, // c
        0.386036, // d
        5.301883, // e
        0.092819  // f

    };

    half LinearToLogC_Precise(half x)
    {
        half o;
        if (x > LogC.cut)
            o = LogC.c * log10(LogC.a * x + LogC.b) + LogC.d;
        else
            o = LogC.e * x + LogC.f;
        return o;
    }

    half PositivePow(half base, half power)
    {
        return pow(max(abs(base), half(FLT_EPSILON)), power);
    }

    half3 LinearToLogC(half3 x)
    {
        return LogC.c * log10(LogC.a * x + LogC.b) + LogC.d;
    }

    half3 LinerToSRGB(half3 c)
    {
        return c * (c * (c * 0.305306011 + 0.682171111) + 0.012522878);
    }

    half3 SRGBToLinear(half3 c)
    {
        return max(1.055 * PositivePow(c, 0.416666667) - 0.055, 0.0);
    }

    half3 LogCToLinear(half3 c)
    {
        return (pow(10.0, (c - LogC.d) / LogC.c) - LogC.b) / LogC.a;
    }

    // Specular stuff taken from https://github.com/z3y/shaders/
    float pow5(float x)
    {
        float x2 = x * x;
        return x2 * x2 * x;
    }

    float sq(float x)
    {
        return x * x;
    }

    struct Gradient
    {
        int type;
        int colorsLength;
        int alphasLength;
        half4 colors[8];
        half2 alphas[8];
    };

    Gradient NewGradient(
        int type, int colorsLength, int alphasLength,
        half4 colors0, half4 colors1, half4 colors2, half4 colors3, half4 colors4, half4 colors5, half4 colors6, half4 colors7,
        half2 alphas0, half2 alphas1, half2 alphas2, half2 alphas3, half2 alphas4, half2 alphas5, half2 alphas6, half2 alphas7)
    {
        Gradient g;
        g.type = type;
        g.colorsLength = colorsLength;
        g.alphasLength = alphasLength;
        g.colors[ 0 ] = colors0;
        g.colors[ 1 ] = colors1;
        g.colors[ 2 ] = colors2;
        g.colors[ 3 ] = colors3;
        g.colors[ 4 ] = colors4;
        g.colors[ 5 ] = colors5;
        g.colors[ 6 ] = colors6;
        g.colors[ 7 ] = colors7;
        g.alphas[ 0 ] = alphas0;
        g.alphas[ 1 ] = alphas1;
        g.alphas[ 2 ] = alphas2;
        g.alphas[ 3 ] = alphas3;
        g.alphas[ 4 ] = alphas4;
        g.alphas[ 5 ] = alphas5;
        g.alphas[ 6 ] = alphas6;
        g.alphas[ 7 ] = alphas7;
        return g;
    }

    half4 SampleGradient(Gradient gradient, half time)
    {
        half3 color = gradient.colors[0].rgb;

        UNITY_UNROLL
        for (int c = 1; c < 8; c++)
        {
            half colorPos = saturate((time - gradient.colors[c - 1].w) / (0.00001 + (gradient.colors[c].w - gradient.colors[c - 1].w)) * step(c, (half)gradient.colorsLength - 1));
            color = lerp(color, gradient.colors[c].rgb, lerp(colorPos, step(0.01, colorPos), gradient.type));
        }

        #ifndef UNITY_COLORSPACE_GAMMA
        color = half3(GammaToLinearSpaceExact(color.r), GammaToLinearSpaceExact(color.g), GammaToLinearSpaceExact(color.b));
        #endif

        half alpha = gradient.alphas[0].x;

        UNITY_UNROLL
        for (int a = 1; a < 8; a++)
        {
            half alphaPos = saturate((time - gradient.alphas[a - 1].y) / (0.00001 + (gradient.alphas[a].y - gradient.alphas[a - 1].y)) * step(a, (half)gradient.alphasLength - 1));
            alpha = lerp(alpha, gradient.alphas[a].x, lerp(alphaPos, step(0.01, alphaPos), gradient.type));
        }
        return half4(color, alpha);
    }

    float3 RotateAroundAxis(float3 center, float3 original, float3 u, float angle)
    {
        original -= center;
        float C = cos(angle);
        float S = sin(angle);
        float t = 1 - C;
        float m00 = t * u.x * u.x + C;
        float m01 = t * u.x * u.y - S * u.z;
        float m02 = t * u.x * u.z + S * u.y;
        float m10 = t * u.x * u.y + S * u.z;
        float m11 = t * u.y * u.y + C;
        float m12 = t * u.y * u.z - S * u.x;
        float m20 = t * u.x * u.z - S * u.y;
        float m21 = t * u.y * u.z + S * u.x;
        float m22 = t * u.z * u.z + C;
        float3x3 finalMatrix = float3x3(m00, m01, m02, m10, m11, m12, m20, m21, m22);
        return mul(finalMatrix, original) + center;
    }

    void GetTriplanarUV(half3 position, out half2 uvX, out half2 uvY, out half2 uvZ)
    {
        uvX = half2(position.z, position.y + 0.5);
        uvY = position.xz;
        uvZ = half2(position.x + 0.5, position.y + 0.5);
    }

    void GetTriplanarWeights(half3 normal, out half weightX, out half weightY, out half weightZ)
    {
        half3 absNormal = abs(normal);
        half3 sum = absNormal / (absNormal.x + absNormal.y + absNormal.z);
        weightX = sum.x;
        weightY = sum.y;
        weightZ = sum.z;
    }

    half2 Rotate2D(half2 source, half angle)
    {
        half2x2 rotMat = { cos(angle), -sin(angle), sin(angle), cos(angle) };
        return mul(rotMat, source);
    }

    float2 Rotate2DFloat(float2 source, float angle)
    {
        float2x2 rotMat = { cos(angle), -sin(angle), sin(angle), cos(angle) };
        return mul(rotMat, source);
    }

    struct ORL_UVChannelData
    {
        float4 uv0;
        float4 uv1;
        float4 uv2;
        float4 uv3;
    };

    #define SetupChannelData(d) (ORL_UVChannelData)0; \
                                uvData.uv0 = d.uv0; \
                                uvData.uv1 = d.uv1; \
                                uvData.uv2 = d.uv2; \
                                uvData.uv3 = d.uv3

    float2 GetUVChannel(ORL_UVChannelData d, int channel, float4 ST)
    {
        float2 UV = 0;
        switch (channel) {
            case 0: UV = d.uv0; break;
            case 1: UV = d.uv1; break;
            case 2: UV = d.uv2; break;
            case 3: UV = d.uv3; break;
        }
        UV = UV * ST.xy + ST.zw;
        return UV;
    }

    float2 RotateAroundCenter2D(float2 source, float angle)
    {
        angle = radians(angle);
        float sinAngle = sin(angle);
        float cosAngle = cos(angle);
        float2x2 rotationMatrix = { cosAngle, -sinAngle, sinAngle, cosAngle };
        source -= 0.5;
        source = mul(rotationMatrix, source);
        source += 0.5;
        return source;
    }

    
    float GLSLMod(float x, float y)
    {
        return (((x)-(y)*floor((x)/(y))));
    }

    float2 GLSLMod(float2 x, float2 y)
    {
        return (((x)-(y)*floor((x)/(y))));
    }

    // Found in this article on tonemapping: https://mini.gmshaders.com/p/tonemaps
    // Narkowicz 2015, "ACES Filmic Tone Mapping Curve"
    float3 Tonemap_ACES(float3 x)
    {
        float a = 2.51;
        float b = 0.03;
        float c = 2.43;
        float d = 0.59;
        float e = 0.14;
        return (x * (a * x + b)) / (x * (c * x + d) + e);
    }

    // Hable 2010, "Filmic Tonemapping Operators"
    float3 Tonemap_Uncharted2(float3 x)
    {
        x *= 16.0;
        float A = 0.15;
        float B = 0.50;
        float C = 0.10;
        float D = 0.20;
        float E = 0.02;
        float F = 0.30;
        
        return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
    }

    float3 Tonemap_Unreal(float3 x)
    {
        // Unreal 3, Documentation: "Color Grading"
        // Adapted to be close to Tonemap_ACES, with similar range
        // Gamma 2.2 correction is baked in, don't use with sRGB conversion!
        return x / (x + 0.155) * 1.019;
    }

    // https://github.com/yuki-koyama/enhancer
    // MIT License

    // Copyright (c) 2018 Yuki Koyama

    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal
    // in the Software without restriction, including without limitation the rights
    // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    // copies of the Software, and to permit persons to whom the Software is
    // furnished to do so, subject to the following conditions:

    // The above copyright notice and this permission notice shall be included in all
    // copies or substantial portions of the Software.

    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    // SOFTWARE.
    float3 applyLiftGammaGainEffect(float3 linear_rgb, float3 lift, float3 gamma, float3 gain)
    {
        float3 lift_applied_linear_rgb  = clamp((linear_rgb - 1.0) * (2.0 - lift) + 1.0, 0.0, 1.0);
        float3 gain_applied_linear_rgb  = lift_applied_linear_rgb * gain;
        float3 gamma_applied_linear_rgb = pow(gain_applied_linear_rgb, 1.0 / gamma);

        return gamma_applied_linear_rgb;
    }

    
    // https://github.com/MochiesCode/Mochies-Unity-Shaders/
    // MIT License

    // Copyright (c) 2020 MochiesCode

    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the "Software"), to deal
    // in the Software without restriction, including without limitation the rights
    // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    // copies of the Software, and to permit persons to whom the Software is
    // furnished to do so, subject to the following conditions:

    // The above copyright notice and this permission notice shall be included in all
    // copies or substantial portions of the Software.

    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    // SOFTWARE.
    float3 GetSpritesheetUV(float2 uv, float2 rowsColumns, float fps, int pauseFrames, int frameOffset){
        float2 size = float2(1/rowsColumns.x, 1/rowsColumns.y);
        uint totalFrames = rowsColumns.x * rowsColumns.y;
        uint index = 0;
        index = (_Time.y * fps + frameOffset) % (totalFrames + pauseFrames);

        if (index > totalFrames) {
            index = totalFrames;
        }

        uint indexX = index % rowsColumns.x;
        uint indexY = floor((index % totalFrames) / rowsColumns.x);
        float2 offset = float2(size.x*indexX,-size.y*indexY);
        float2 uv1 = uv*size;
        uv1.y = uv1.y + size.y*(rowsColumns.y - 1);
        uv = uv1 + offset;
        return float3(uv,0);
    }

    // SDFS
    // https://iquilezles.org/articles/distfunctions2d/
    float SDFBox(float2 p, float2 b )
    {
        float2 d = abs(p)-b;
        return length(max(d,0.0)) + min(max(d.x,d.y),0.0);
    }

    float SDFCircle(float2 p, float r)
    {
        return length(p) - r;
    }
}